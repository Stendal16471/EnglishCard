"""
English Learning Telegram Bot with Difficulty Levels

This bot helps users learn English words with features:
- Personal dictionary
- Knowledge testing with difficulty levels
- Progress statistics

The module interacts with PostgreSQL database and implements:
1. User dictionary management
2. Testing system with 3 difficulty levels
3. Statistics collection

Example usage:
    python main.py
"""

import random

import psycopg2
import telebot
from telebot import types

# Database connection settings
DB_CONFIG = {
    'dbname': 'learning_english_db',
    'user': 'postgres',
    'password': 'password',
    'host': 'localhost',
    'port': '5432',
    'client_encoding': 'UTF8'
}

# Difficulty levels configuration
DIFFICULTY_LEVELS = {
    'easy': {'name': 'üçè –õ–µ–≥–∫–∏–π', 'words_limit': 10,
             'description': '–¢–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞ (—Ü–≤–µ—Ç–∞, —á–∏—Å–ª–∞)'},
    'medium': {'name': 'üçä –°—Ä–µ–¥–Ω–∏–π', 'words_limit': 20,
               'description': '–°–º–µ—Å—å –ø—Ä–æ—Å—Ç—ã—Ö –∏ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª–æ–≤'},
    'hard': {'name': 'üå∂Ô∏è –°–ª–æ–∂–Ω—ã–π', 'words_limit': 50,
             'description': '–í—Å–µ —Å–ª–æ–≤–∞, –≤–∫–ª—é—á–∞—è —Ä–µ–¥–∫–∏–µ'}
}

# Initialize bot
bot = telebot.TeleBot('TOKEN')


def create_main_keyboard():
    """Create the main menu keyboard with difficulty level button.

    Returns:
        types.ReplyKeyboardMarkup: Keyboard with buttons:
            - Start test
            - My dictionary
            - Add/Remove word
            - Statistics
            - Difficulty level
            - Help
    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"))
    markup.row(types.KeyboardButton("üìñ –ú–æ–π —Å–ª–æ–≤–∞—Ä—å"))
    markup.row(types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"),
               types.KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"))
    markup.row(types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
               types.KeyboardButton("‚öôÔ∏è –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"))
    markup.row(types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
    return markup


def safe_connect():
    """Establish secure database connection with error handling.

    Returns:
        psycopg2.connection or None: Connection object or None if error occurs.

    Raises:
        psycopg2.OperationalError: If connection to database fails.
    """
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        conn.set_client_encoding('UTF8')
        return conn
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


def initialize_database():
    """Initialize database structure with difficulty level column.

    Creates all necessary tables if they don't exist:
        - users: user information with difficulty level
        - common_words: common vocabulary
        - user_words: personal user words
        - user_stats: answer statistics

    Returns:
        bool: True if initialization successful, False otherwise.

    Raises:
        psycopg2.DatabaseError: For SQL query execution errors.
    """
    conn = safe_connect()
    if not conn:
        return False

    try:
        with conn.cursor() as cur:
            # Create users table with difficulty column
            cur.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    username VARCHAR(100),
                    first_name VARCHAR(100),
                    last_name VARCHAR(100),
                    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    difficulty VARCHAR(10) DEFAULT 'medium'
                )
            """)

            # Creating a table of common words
            cur.execute("""
                CREATE TABLE IF NOT EXISTS common_words (
                    word_id SERIAL PRIMARY KEY,
                    english_word VARCHAR(100) NOT NULL,
                    russian_translation VARCHAR(100) NOT NULL,
                    word_type VARCHAR(50)
                )
            """)

            # Creating a table of custom words
            cur.execute("""
                CREATE TABLE IF NOT EXISTS user_words (
                    user_word_id SERIAL PRIMARY KEY,
                    user_id BIGINT REFERENCES users(user_id),
                    english_word VARCHAR(100) NOT NULL,
                    russian_translation VARCHAR(100) NOT NULL,
                    added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    is_active BOOLEAN DEFAULT TRUE
                )
            """)

            # Creating a statistics table
            cur.execute("""
                CREATE TABLE IF NOT EXISTS user_stats (
                    stat_id SERIAL PRIMARY KEY,
                    user_id BIGINT REFERENCES users(user_id),
                    word_id INTEGER,
                    is_correct BOOLEAN,
                    attempt_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)

            # Checking the availability of data in common_words
            cur.execute("SELECT COUNT(*) FROM common_words")
            if cur.fetchone()[0] == 0:
                # Adding the initial set of words
                common_words = [
                    # Colors
                    ('red', '–∫—Ä–∞—Å–Ω—ã–π', '—Ü–≤–µ—Ç'), ('blue', '—Å–∏–Ω–∏–π', '—Ü–≤–µ—Ç'),
                    ('green', '–∑–µ–ª–µ–Ω—ã–π', '—Ü–≤–µ—Ç'), ('yellow', '–∂–µ–ª—Ç—ã–π', '—Ü–≤–µ—Ç'),
                    ('black', '—á–µ—Ä–Ω—ã–π', '—Ü–≤–µ—Ç'), ('white', '–±–µ–ª—ã–π', '—Ü–≤–µ—Ç'),
                    ('orange', '–æ—Ä–∞–Ω–∂–µ–≤—ã–π', '—Ü–≤–µ—Ç'), ('purple', '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π', '—Ü–≤–µ—Ç'),
                    ('pink', '—Ä–æ–∑–æ–≤—ã–π', '—Ü–≤–µ—Ç'), ('brown', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', '—Ü–≤–µ—Ç'),

                    # Pronouns
                    ('I', '—è', '–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ'), ('you', '—Ç—ã', '–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ'),
                    ('he', '–æ–Ω', '–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ'), ('she', '–æ–Ω–∞', '–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ'),
                    ('it', '–æ–Ω–æ', '–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ'), ('we', '–º—ã', '–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ'),
                    ('they', '–æ–Ω–∏', '–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ'), ('my', '–º–æ–π', '–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ'),
                    ('your', '—Ç–≤–æ–π', '–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ'), ('our', '–Ω–∞—à', '–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ'),

                    # Numbers (1-10)
                    ('one', '–æ–¥–∏–Ω', '—á–∏—Å–ª–æ'), ('two', '–¥–≤–∞', '—á–∏—Å–ª–æ'),
                    ('three', '—Ç—Ä–∏', '—á–∏—Å–ª–æ'), ('four', '—á–µ—Ç—ã—Ä–µ', '—á–∏—Å–ª–æ'),
                    ('five', '–ø—è—Ç—å', '—á–∏—Å–ª–æ'), ('six', '—à–µ—Å—Ç—å', '—á–∏—Å–ª–æ'),
                    ('seven', '—Å–µ–º—å', '—á–∏—Å–ª–æ'), ('eight', '–≤–æ—Å–µ–º—å', '—á–∏—Å–ª–æ'),
                    ('nine', '–¥–µ–≤—è—Ç—å', '—á–∏—Å–ª–æ'), ('ten', '–¥–µ—Å—è—Ç—å', '—á–∏—Å–ª–æ'),

                    # Animals
                    ('cat', '–∫–æ—à–∫–∞', '–∂–∏–≤–æ—Ç–Ω–æ–µ'), ('dog', '—Å–æ–±–∞–∫–∞', '–∂–∏–≤–æ—Ç–Ω–æ–µ'),
                    ('bird', '–ø—Ç–∏—Ü–∞', '–∂–∏–≤–æ—Ç–Ω–æ–µ'), ('fish', '—Ä—ã–±–∞', '–∂–∏–≤–æ—Ç–Ω–æ–µ'),
                    ('horse', '–ª–æ—à–∞–¥—å', '–∂–∏–≤–æ—Ç–Ω–æ–µ'), ('cow', '–∫–æ—Ä–æ–≤–∞', '–∂–∏–≤–æ—Ç–Ω–æ–µ'),
                    ('pig', '—Å–≤–∏–Ω—å—è', '–∂–∏–≤–æ—Ç–Ω–æ–µ'), ('rabbit', '–∫—Ä–æ–ª–∏–∫', '–∂–∏–≤–æ—Ç–Ω–æ–µ'),
                    ('lion', '–ª–µ–≤', '–∂–∏–≤–æ—Ç–Ω–æ–µ'), ('tiger', '—Ç–∏–≥—Ä', '–∂–∏–≤–æ—Ç–Ω–æ–µ'),

                    # Family
                    ('mother', '–º–∞—Ç—å', '—Å–µ–º—å—è'), ('father', '–æ—Ç–µ—Ü', '—Å–µ–º—å—è'),
                    ('brother', '–±—Ä–∞—Ç', '—Å–µ–º—å—è'), ('sister', '—Å–µ—Å—Ç—Ä–∞', '—Å–µ–º—å—è'),
                    ('son', '—Å—ã–Ω', '—Å–µ–º—å—è'), ('daughter', '–¥–æ—á—å', '—Å–µ–º—å—è'),
                    ('grandmother', '–±–∞–±—É—à–∫–∞', '—Å–µ–º—å—è'), ('grandfather', '–¥–µ–¥—É—à–∫–∞', '—Å–µ–º—å—è'),

                    # Basic verbs
                    ('go', '–∏–¥—Ç–∏', '–≥–ª–∞–≥–æ–ª'), ('eat', '–µ—Å—Ç—å', '–≥–ª–∞–≥–æ–ª'),
                    ('drink', '–ø–∏—Ç—å', '–≥–ª–∞–≥–æ–ª'), ('sleep', '—Å–ø–∞—Ç—å', '–≥–ª–∞–≥–æ–ª'),
                    ('read', '—á–∏—Ç–∞—Ç—å', '–≥–ª–∞–≥–æ–ª'), ('write', '–ø–∏—Å–∞—Ç—å', '–≥–ª–∞–≥–æ–ª'),
                    ('speak', '–≥–æ–≤–æ—Ä–∏—Ç—å', '–≥–ª–∞–≥–æ–ª'), ('listen', '—Å–ª—É—à–∞—Ç—å', '–≥–ª–∞–≥–æ–ª'),
                    ('love', '–ª—é–±–∏—Ç—å', '–≥–ª–∞–≥–æ–ª'), ('learn', '—É—á–∏—Ç—å', '–≥–ª–∞–≥–æ–ª'),

                    # Difficult words
                    ('abundance', '–∏–∑–æ–±–∏–ª–∏–µ', '—Å–ª–æ–∂–Ω–æ–µ'),
                    ('benevolent', '–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π', '—Å–ª–æ–∂–Ω–æ–µ'),
                    ('conundrum', '–≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞', '—Å–ª–æ–∂–Ω–æ–µ'),
                    ('diligent', '—É—Å–µ—Ä–¥–Ω—ã–π', '—Å–ª–æ–∂–Ω–æ–µ'),
                    ('ephemeral', '—ç—Ñ–µ–º–µ—Ä–Ω—ã–π', '—Å–ª–æ–∂–Ω–æ–µ'),
                    ('fastidious', '–ø—Ä–∏–≤–µ—Ä–µ–¥–ª–∏–≤—ã–π', '—Å–ª–æ–∂–Ω–æ–µ')
                ]
                for word in common_words:
                    cur.execute(
                        "INSERT INTO common_words (english_word, russian_translation, word_type) "
                        "VALUES (%s, %s, %s)",
                        word
                    )
                print("–î–æ–±–∞–≤–ª–µ–Ω –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤")

            conn.commit()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    finally:
        if conn:
            conn.close()


# Initializing the database at startup
if not initialize_database():
    print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. "
          "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
    exit(1)


@bot.message_handler(commands=['start'])
def start(message):
    """Handle /start command with difficulty level initialization.

    Args:
        message (telebot.types.Message): Incoming message object.

    Behavior:
        - Checks if user exists in database
        - Registers new user if not exists
        - Sets default difficulty level ('medium')
        - Sends welcome message with instructions
        - Shows main menu keyboard
    """
    user = message.from_user

    # Add user to database with existence check
    conn = safe_connect()
    if not conn:
        return

    with conn, conn.cursor() as cur:
        # First check if user exists
        cur.execute("SELECT 1 FROM users WHERE user_id = %s", (user.id,))
        exists = cur.fetchone()

        if not exists:
            # Insert new user if doesn't exist
            cur.execute(
                "INSERT INTO users (user_id, username, first_name, last_name, difficulty) "
                "VALUES (%s, %s, %s, %s, %s)",
                (user.id, user.username, user.first_name, user.last_name, 'medium')
            )
            print(f"New user added: {user.id} {user.username}")
        else:
            print(f"User already exists: {user.id} {user.username}")

    # Send welcome message
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ö–æ–Ω–Ω–æ—Ä. –ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∏–∑—É—á–µ–Ω–∏–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤. "
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç - –ü—Ä–æ–≤–µ–¥—É —Ç–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ —Å–ª–æ–≤\n"
        "‚öôÔ∏è –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ - –ò–∑–º–µ–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤\n"
        "üìñ –ú–æ–π —Å–ª–æ–≤–∞—Ä—å - –ü–æ–∫–∞–∂—É —Ç–≤–æ–π —Å–ª–æ–≤–∞—Ä—å\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ - –î–æ–±–∞–≤–ª—é –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ü–æ–∫–∞–∂—É —Ç–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "‚ùì –ü–æ–º–æ—â—å - –î–∞–º —Å–ø—Ä–∞–≤–∫—É –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        "–ù–∞—á–Ω–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ –∏–ª–∏ —Å—Ä–∞–∑—É –ø—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç!"
    )
    bot.send_message(message.chat.id, welcome_message,
                     reply_markup=create_main_keyboard())


@bot.message_handler(commands=['help'])
def show_help(message):
    """Show help information about available commands.

    Args:
        message (telebot.types.Message): Incoming message object.

    Behavior:
        - Sends formatted help message with HTML formatting
        - Shows main menu keyboard
    """
    help_text = """
üìö <b>–í–æ—Ç –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏:</b>

üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏–µ —Å–ª–æ–≤
‚öôÔ∏è –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ - –ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
üìñ –ú–æ–π —Å–ª–æ–≤–∞—Ä—å - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞
‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è

<b>–§–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤:</b>
<code>–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ_—Å–ª–æ–≤–æ - —Ä—É—Å—Å–∫–∏–π_–ø–µ—Ä–µ–≤–æ–¥</code>
–ü—Ä–∏–º–µ—Ä: <code>apple - —è–±–ª–æ–∫–æ</code>
"""
    bot.send_message(message.chat.id, help_text, parse_mode='HTML',
                     reply_markup=create_main_keyboard())


@bot.message_handler(func=lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
def handle_help_button(message):
    """Handle help button press.

    Args:
        message (telebot.types.Message): Incoming message object.

    Behavior:
        - Calls show_help() function
    """
    show_help(message)


@bot.message_handler(
    func=lambda message: message.text == "‚öôÔ∏è –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"
)
def show_difficulty_menu(message):
    """Show difficulty level selection menu.

    Args:
        message (telebot.types.Message): Incoming message object.

    Behavior:
        - Gets current user's difficulty level from database
        - Shows menu with available levels (marks current with ‚úì)
        - Provides back to main menu button
    """
    user_id = message.from_user.id
    conn = safe_connect()
    if not conn:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                         reply_markup=create_main_keyboard())
        return

    try:
        with conn.cursor() as cur:
            # Getting the user's current difficulty level
            cur.execute("SELECT difficulty FROM users WHERE user_id = %s", (user_id,))
            current_difficulty = cur.fetchone()
            current_level = current_difficulty[0] if current_difficulty else 'medium'

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                               one_time_keyboard=True)
            for level in DIFFICULTY_LEVELS.values():
                # Add a "‚úì" mark to the current level
                prefix = (
                    "‚úì "
                    if level['name'] == DIFFICULTY_LEVELS[current_level]['name']
                    else ""
                )
                markup.add(types.KeyboardButton(f"{prefix}{level['name']}"))
            markup.add(types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

            bot.send_message(
                message.chat.id,
                "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤:</b>\n\n" +
                "\n".join([f"{level['name']} - {level['description']}"
                           for level in DIFFICULTY_LEVELS.values()]),
                parse_mode='HTML',
                reply_markup=markup
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {e}")
        bot.send_message(message.chat.id,
                         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.",
                         reply_markup=create_main_keyboard())
    finally:
        conn.close()


@bot.message_handler(
    func=lambda message: any(message.text.replace("‚úì ", "") == level['name']
                             for level in DIFFICULTY_LEVELS.values()))
def set_difficulty_level(message):
    """Set the selected difficulty level for the user.

    Args:
        message (telebot.types.Message): Message containing selected difficulty level.

    Behavior:
        - Extracts difficulty level from button text (removes ‚úì mark if present)
        - Updates user's difficulty setting in database
        - Sends confirmation message with new level info
        - Returns to main menu
    """
    user_id = message.from_user.id
    # Remove the "‚úì" mark if it is present
    difficulty_text = message.text.replace("‚úì ", "")
    # Find the key of the difficulty level by name
    difficulty = next(key for key, level in DIFFICULTY_LEVELS.items()
                      if level['name'] == difficulty_text)

    conn = safe_connect()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute("""
                    UPDATE users SET difficulty = %s WHERE user_id = %s
                """, (difficulty, user_id))
                conn.commit()

                bot.send_message(
                    message.chat.id,
                    f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {DIFFICULTY_LEVELS[difficulty]['name']}\n"
                    f"{DIFFICULTY_LEVELS[difficulty]['description']}",
                    reply_markup=create_main_keyboard()
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {e}")
            bot.send_message(message.chat.id,
                             "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.",
                             reply_markup=create_main_keyboard())
        finally:
            conn.close()
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                         reply_markup=create_main_keyboard())


@bot.message_handler(commands=['quiz'])
def start_quiz(message):
    """Start knowledge test considering user's difficulty level.

    Args:
        message (telebot.types.Message): Incoming message object.

    Behavior:
        1. Gets user's current difficulty level from database
        2. Selects random word according to difficulty:
           - Easy: only simple words (colors, pronouns, numbers)
           - Medium: all words except complex ones
           - Hard: all words without restrictions
        3. Creates 4 answer options (1 correct + 3 random wrong)
        4. Shows question with answer options
        5. Registers answer handler check_quiz_answer()
    """
    user_id = message.from_user.id
    conn = safe_connect()
    if not conn:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                         reply_markup=create_main_keyboard())
        return

    try:
        with conn.cursor() as cur:
            # Getting the user's current difficulty level
            cur.execute("SELECT difficulty FROM users WHERE user_id = %s", (user_id,))
            difficulty_row = cur.fetchone()
            difficulty = (
                difficulty_row[0] if difficulty_row and difficulty_row[0] else 'medium'
            )
            words_limit = DIFFICULTY_LEVELS[difficulty]['words_limit']

            # Form a request depending on the level of complexity
            if difficulty == 'easy':
                # Only simple words (colors, pronouns, numbers)
                cur.execute("""
                    SELECT source, word_id, english_word, russian_translation FROM (
                        (SELECT 'common' AS source, word_id, english_word, russian_translation 
                         FROM common_words 
                         WHERE word_type IN ('—Ü–≤–µ—Ç', '–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ', '—á–∏—Å–ª–æ')
                         ORDER BY RANDOM() LIMIT %s)
                        UNION ALL
                        (SELECT 'user' AS source, user_word_id, english_word, russian_translation 
                         FROM user_words 
                         WHERE user_id = %s AND is_active = TRUE
                         ORDER BY RANDOM() LIMIT %s)
                    ) AS combined_words ORDER BY RANDOM() LIMIT 1
                """, (words_limit, user_id, words_limit))
            elif difficulty == 'medium':
                # All words except complex ones
                cur.execute("""
                    SELECT source, word_id, english_word, russian_translation FROM (
                        (SELECT 'common' AS source, word_id, english_word, russian_translation 
                         FROM common_words 
                         WHERE word_type != '—Å–ª–æ–∂–Ω–æ–µ' OR word_type IS NULL
                         ORDER BY RANDOM() LIMIT %s)
                        UNION ALL
                        (SELECT 'user' AS source, user_word_id, english_word, russian_translation 
                         FROM user_words 
                         WHERE user_id = %s AND is_active = TRUE
                         ORDER BY RANDOM() LIMIT %s)
                    ) AS combined_words ORDER BY RANDOM() LIMIT 1
                """, (words_limit, user_id, words_limit))
            else:
                # All words without restrictions
                cur.execute("""
                    SELECT source, word_id, english_word, russian_translation FROM (
                        (SELECT 'common' AS source, word_id, english_word, russian_translation 
                         FROM common_words 
                         ORDER BY RANDOM() LIMIT %s)
                        UNION ALL
                        (SELECT 'user' AS source, user_word_id, english_word, russian_translation 
                         FROM user_words 
                         WHERE user_id = %s AND is_active = TRUE
                         ORDER BY RANDOM() LIMIT %s)
                    ) AS combined_words ORDER BY RANDOM() LIMIT 1
                """, (words_limit, user_id, words_limit))

            word_data = cur.fetchone()
            if not word_data:
                bot.send_message(message.chat.id,
                                 "–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –î–æ–±–∞–≤—å —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ /add_word",
                                 reply_markup=create_main_keyboard())
                return

            source_type, word_id, english_word, correct_translation = word_data

            # Get 3 random incorrect options
            cur.execute("""
                SELECT russian_translation FROM (
                    (SELECT russian_translation FROM common_words WHERE russian_translation != %s)
                    UNION ALL
                    (SELECT russian_translation FROM user_words 
                     WHERE user_id = %s AND russian_translation != %s AND is_active = TRUE)
                ) AS wrong_options ORDER BY RANDOM() LIMIT 3
            """, (correct_translation, user_id, correct_translation))

            wrong_answers = [row[0] for row in cur.fetchall()]
            options = [correct_translation] + wrong_answers
            random.shuffle(options)

            # Creating a keyboard with options
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                               one_time_keyboard=True)
            for option in options:
                markup.add(types.KeyboardButton(option))
            markup.add(types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

            # Saving the data for verification
            msg = bot.send_message(
                message.chat.id,
                f"–£—Ä–æ–≤–µ–Ω—å: {DIFFICULTY_LEVELS[difficulty]['name']}\n"
                f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: <b>{english_word}</b>?",
                parse_mode='HTML',
                reply_markup=markup
            )

            # Registering the response handler
            bot.register_next_step_handler(
                msg,
                lambda m: check_quiz_answer(m, correct_translation, source_type, word_id)
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞.",
                         reply_markup=create_main_keyboard())
    finally:
        conn.close()


@bot.message_handler(func=lambda message: message.text == "üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç")
def handle_quiz_button(message):
    """Handle quiz start button press.

    Args:
        message (telebot.types.Message): Incoming message object.

    Behavior:
        - Calls start_quiz() function
    """
    start_quiz(message)


def check_quiz_answer(message, correct_answer, source_type, word_id):
    """Process user's quiz answer and save result.

    Args:
        message (telebot.types.Message): User's answer message.
        correct_answer (str): Correct translation.
        source_type (str): 'common' or 'user' word source.
        word_id (int): Word ID in corresponding table.

    Behavior:
        - Checks if answer is correct
        - Saves result to database (user_stats table)
        - Provides feedback to user
        - Offers to continue with next question or return to main menu
    """
    user_answer = message.text
    user_id = message.from_user.id

    # If the user has selected the "Main Menu"
    if user_answer == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                         reply_markup=create_main_keyboard())
        return

    # Checking the response
    if user_answer == correct_answer:
        response = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü :)"
        is_correct = True
    else:
        response = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ :( –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
        is_correct = False

    # Saving the result
    conn = safe_connect()
    if conn:
        try:
            with conn.cursor() as cur:
                if source_type == 'common':
                    cur.execute(
                        "INSERT INTO user_stats (user_id, word_id, is_correct) VALUES (%s, %s, %s)",
                        (user_id, word_id, is_correct)
                    )
                else:
                    cur.execute(
                        "INSERT INTO user_stats (user_id, word_id, is_correct) VALUES (%s, %s, %s)",
                        (user_id, -word_id, is_correct)
                    )
                conn.commit()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        finally:
            conn.close()

    # Suggests continue
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üéØ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"))
    markup.add(types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    bot.send_message(message.chat.id, response, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üéØ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å")
def handle_next_question(message):
    """Handle next question button press.

    Args:
        message (telebot.types.Message): Incoming message object.

    Behavior:
        - Calls start_quiz() function
    """
    start_quiz(message)


@bot.message_handler(func=lambda message: message.text
                                          in ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
def handle_back_button(message):
    """Handle back to main menu button press.

    Args:
        message (telebot.types.Message): Incoming message object.

    Behavior:
        - Shows main menu keyboard
    """
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                     reply_markup=create_main_keyboard())


@bot.message_handler(commands=['my_words'])
def show_my_words(message):
    """Display the user's personal dictionary.

    Args:
        message (telebot.types.Message): The incoming message object.

    Behavior:
        - Shows all active words from user's dictionary
        - Splits long word lists into multiple messages (3000 char limit)
        - Displays total word count
        - Provides instructions for word removal
    """
    user_id = message.from_user.id
    conn = safe_connect()
    if not conn:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                         reply_markup=create_main_keyboard())
        return

    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT english_word, russian_translation 
                FROM user_words 
                WHERE user_id = %s AND is_active = TRUE
                ORDER BY english_word
            """, (user_id,))

            words = cur.fetchall()

            if not words:
                bot.send_message(message.chat.id,
                                 "–¢–≤–æ–π —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ /add_word",
                                 reply_markup=create_main_keyboard())
                return

            words_list = ["üìö <b>–¢–≤–æ–π —Å–ª–æ–≤–∞—Ä—å:</b>\n"]
            words_list.extend([f"‚Ä¢ {en_word} - {ru_word}" for en_word, ru_word in words])

            max_length = 3000
            current_part = []
            current_length = 0

            for word in words_list:
                word_length = len(word) + 1
                if current_length + word_length > max_length:
                    bot.send_message(message.chat.id, "\n".join(current_part), parse_mode='HTML')
                    current_part = []
                    current_length = 0
                current_part.append(word)
                current_length += word_length

            if current_part:
                bot.send_message(message.chat.id, "\n".join(current_part), parse_mode='HTML')

            bot.send_message(
                message.chat.id,
                f"–í—Å–µ–≥–æ —Å–ª–æ–≤: {len(words)}\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /remove_word –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤",
                parse_mode='HTML',
                reply_markup=create_main_keyboard()
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤: {e}")
        bot.send_message(message.chat.id,
                         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤.",
                         reply_markup=create_main_keyboard())
    finally:
        conn.close()


@bot.message_handler(func=lambda message: message.text == "üìñ –ú–æ–π —Å–ª–æ–≤–∞—Ä—å")
def handle_my_words_button(message):
    """Handle my dictionary button press.

    Args:
        message (telebot.types.Message): Incoming message object.

    Behavior:
        - Calls show_my_words() function
    """
    show_my_words(message)


@bot.message_handler(commands=['add_word'])
def add_word(message):
    """Initiate the word addition process.

    Args:
        message (telebot.types.Message): The incoming message object.

    Behavior:
        - Removes keyboard to allow free text input
        - Sends instructions for word format
        - Registers process_new_word as next step handler
    """
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ_—Å–ª–æ–≤–æ - —Ä—É—Å—Å–∫–∏–π_–ø–µ—Ä–µ–≤–æ–¥\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: apple - —è–±–ª–æ–∫–æ",
        reply_markup=types.ReplyKeyboardRemove()
    )
    bot.register_next_step_handler(message, process_new_word)


@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ")
def handle_add_word_button(message):
    """Handle add word button press.

    Args:
        message (telebot.types.Message): Incoming message object.

    Behavior:
        - Calls add_word() function
    """
    add_word(message)


def process_new_word(message):
    """Process new word input from user.

    Args:
        message (telebot.types.Message): Message containing word pair.

    Behavior:
        - Validates input format ("eng - rus")
        - Adds word to user's dictionary in database
        - Shows confirmation message with word count
        - Returns to main menu on success
        - Shows error message on failure
    """
    user_id = message.from_user.id
    text = message.text.strip()

    try:
        english, russian = [part.strip() for part in text.split('-', 1)]
        if not english or not russian:
            raise ValueError

        conn = safe_connect()
        if conn:
            try:
                with conn.cursor() as cur:
                    cur.execute(
                        "INSERT INTO user_words (user_id, english_word, russian_translation) "
                        "VALUES (%s, %s, %s)",
                        (user_id, english.lower(), russian.lower())
                    )

                    cur.execute(
                        "SELECT COUNT(*) FROM user_words WHERE user_id = %s AND is_active = TRUE",
                        (user_id,)
                    )
                    word_count = cur.fetchone()[0]

                    conn.commit()

                    bot.send_message(
                        message.chat.id,
                        f"‚úÖ –°–ª–æ–≤–æ '{english}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–≤–æ–π —Å–ª–æ–≤–∞—Ä—å.\n"
                        f"üìö –¢–µ–ø–µ—Ä—å —Ç—ã –∏–∑—É—á–∞–µ—à—å {word_count} —Å–ª–æ–≤.",
                        reply_markup=create_main_keyboard()
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
                bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞.",
                                 reply_markup=create_main_keyboard())
            finally:
                conn.close()
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ_—Å–ª–æ–≤–æ - —Ä—É—Å—Å–∫–∏–π_–ø–µ—Ä–µ–≤–æ–¥\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: /add_word",
            reply_markup=create_main_keyboard()
        )


@bot.message_handler(commands=['remove_word'])
def remove_word(message):
    """Initiate word removal process.

    Args:
        message (telebot.types.Message): The incoming message object.

    Behavior:
        - Fetches user's active words from database
        - Creates keyboard with word options
        - Registers confirm_remove as next handler
    """
    user_id = message.from_user.id
    conn = safe_connect()
    if not conn:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                         reply_markup=create_main_keyboard())
        return

    try:
        with conn.cursor() as cur:
            cur.execute(
                "SELECT user_word_id, english_word FROM user_words "
                "WHERE user_id = %s AND is_active = TRUE",
                (user_id,)
            )
            words = cur.fetchall()

            if not words:
                bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                                 reply_markup=create_main_keyboard())
                return

            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True,
                                               resize_keyboard=True)
            word_dict = {}
            for word_id, english_word in words:
                markup.add(types.KeyboardButton(english_word))
                word_dict[english_word] = word_id
            markup.add(types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

            msg = bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=markup
            )

            bot.register_next_step_handler(msg, lambda m: confirm_remove(m, word_dict))

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        bot.send_message(message.chat.id,
                         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤.",
                         reply_markup=create_main_keyboard())
    finally:
        conn.close()


@bot.message_handler(func=lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")
def handle_remove_word_button(message):
    """Handle remove word button press.

    Args:
        message (telebot.types.Message): Incoming message object.

    Behavior:
        - Calls remove_word() function
    """
    remove_word(message)


def confirm_remove(message, word_dict):
    """Confirm and process word removal.

    Args:
        message (telebot.types.Message): Message with word to remove.
        word_dict (dict): Dictionary mapping words to their IDs.

    Behavior:
        - Marks word as inactive in database
        - Shows confirmation message with updated word count
        - Returns to main menu
    """
    user_id = message.from_user.id
    word_to_remove = message.text

    if word_to_remove == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                         reply_markup=create_main_keyboard())
        return

    if word_to_remove not in word_dict:
        bot.send_message(message.chat.id, "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–≤–æ–µ–º —Å–ª–æ–≤–∞—Ä–µ.",
                         reply_markup=create_main_keyboard())
        return

    conn = safe_connect()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute(
                    "UPDATE user_words SET is_active = FALSE "
                    "WHERE user_word_id = %s AND user_id = %s",
                    (word_dict[word_to_remove], user_id)
                )

                cur.execute(
                    "SELECT COUNT(*) FROM user_words "
                    "WHERE user_id = %s AND is_active = TRUE",
                    (user_id,)
                )
                word_count = cur.fetchone()[0]

                conn.commit()

                bot.send_message(
                    message.chat.id,
                    f"üóëÔ∏è –°–ª–æ–≤–æ '{word_to_remove}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ç–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è.\n"
                    f"üìö –¢–µ–ø–µ—Ä—å —Ç—ã –∏–∑—É—á–∞–µ—à—å {word_count} —Å–ª–æ–≤.",
                    reply_markup=create_main_keyboard()
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞.",
                             reply_markup=create_main_keyboard())
        finally:
            conn.close()


@bot.message_handler(commands=['stats'])
def show_stats(message):
    """Display user learning statistics.

    Args:
        message (telebot.types.Message): The incoming message object.

    Behavior:
        - Shows current difficulty level
        - Displays total words in dictionary
        - Shows correct/total answers count
        - Calculates and shows accuracy percentage
    """
    user_id = message.from_user.id
    conn = safe_connect()
    if not conn:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                         reply_markup=create_main_keyboard())
        return

    try:
        with conn.cursor() as cur:
            # Getting the current difficulty level
            cur.execute("SELECT difficulty FROM users WHERE user_id = %s", (user_id,))
            difficulty_row = cur.fetchone()
            difficulty = (
                difficulty_row[0] if difficulty_row and difficulty_row[0] else 'medium'
            )

            cur.execute(
                "SELECT COUNT(*) FROM user_words WHERE user_id = %s AND is_active = TRUE",
                (user_id,)
            )
            total_words = cur.fetchone()[0]

            cur.execute(
                "SELECT COUNT(*) FROM user_stats WHERE user_id = %s AND is_correct = TRUE",
                (user_id,)
            )
            correct_answers = cur.fetchone()[0]

            cur.execute(
                "SELECT COUNT(*) FROM user_stats WHERE user_id = %s",
                (user_id,)
            )
            total_answers = cur.fetchone()[0]

            accuracy = (correct_answers / total_answers * 100) if total_answers > 0 else 0

            bot.send_message(
                message.chat.id,
                f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> (—É—Ä–æ–≤–µ–Ω—å: "
                f"{DIFFICULTY_LEVELS[difficulty]['name']}):\n\n"
                f"üìö –°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {total_words}\n"
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}\n"
                f"‚ùå –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {total_answers}\n"
                f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%",
                parse_mode='HTML',
                reply_markup=create_main_keyboard()
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
                         reply_markup=create_main_keyboard())
    finally:
        conn.close()


@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def handle_stats_button(message):
    """Handle statistics button press.

    Args:
        message (telebot.types.Message): Incoming message object.

    Behavior:
        - Calls show_stats() function
    """
    show_stats(message)


@bot.message_handler(content_types=['text'])
def handle_text(message):
    """Fallback handler for unrecognized text commands.

    Args:
        message (telebot.types.Message): Any text message not handled elsewhere.

    Behavior:
        - Checks if message is not a known command
        - Shows prompt to use menu buttons
        - Restores main keyboard
    """
    if message.text not in ["üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", "üìñ –ú–æ–π —Å–ª–æ–≤–∞—Ä—å", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ",
                            "‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
                            "‚ùì –ü–æ–º–æ—â—å", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üéØ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"]:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.",
                         reply_markup=create_main_keyboard())


# Launching the bot
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)